// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rm.proto

package tcc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rm.proto", fileDescriptor_1ed982b7978f6dad) }

var fileDescriptor_1ed982b7978f6dad = []byte{
	// 146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x28, 0xca, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x49, 0x4e, 0x96, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf,
	0x49, 0xd5, 0x07, 0x0b, 0x25, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x54, 0x48,
	0x71, 0x25, 0x25, 0x16, 0xa7, 0x42, 0xd8, 0x46, 0x53, 0x19, 0xb9, 0x98, 0x82, 0x72, 0x85, 0x74,
	0xb9, 0xd8, 0x03, 0x8a, 0x52, 0x0b, 0x12, 0x8b, 0x52, 0x85, 0x38, 0xf4, 0x4a, 0x92, 0x93, 0xf5,
	0x22, 0x32, 0x53, 0xa4, 0xc4, 0xf4, 0x20, 0xa6, 0xe8, 0xc1, 0x4c, 0xd1, 0x73, 0x05, 0x99, 0xa2,
	0xc4, 0x20, 0xa4, 0xcf, 0xc5, 0xe6, 0x9c, 0x9f, 0x9b, 0x9b, 0x59, 0x22, 0xc4, 0x0d, 0x56, 0xed,
	0x54, 0x94, 0x98, 0x97, 0x9c, 0x41, 0x40, 0x43, 0x62, 0x5e, 0x72, 0x6a, 0x0e, 0x91, 0x1a, 0x92,
	0xd8, 0xc0, 0x22, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0xe4, 0x36, 0x8d, 0xd8, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RmClient is the client API for Rm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RmClient interface {
	Prepare(ctx context.Context, in *Xid, opts ...grpc.CallOption) (*empty.Empty, error)
	Commit(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*empty.Empty, error)
	Cancel(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*empty.Empty, error)
}

type rmClient struct {
	cc *grpc.ClientConn
}

func NewRmClient(cc *grpc.ClientConn) RmClient {
	return &rmClient{cc}
}

func (c *rmClient) Prepare(ctx context.Context, in *Xid, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tcc.Rm/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmClient) Commit(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tcc.Rm/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmClient) Cancel(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tcc.Rm/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RmServer is the server API for Rm service.
type RmServer interface {
	Prepare(context.Context, *Xid) (*empty.Empty, error)
	Commit(context.Context, *Branch) (*empty.Empty, error)
	Cancel(context.Context, *Branch) (*empty.Empty, error)
}

// UnimplementedRmServer can be embedded to have forward compatible implementations.
type UnimplementedRmServer struct {
}

func (*UnimplementedRmServer) Prepare(ctx context.Context, req *Xid) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (*UnimplementedRmServer) Commit(ctx context.Context, req *Branch) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedRmServer) Cancel(ctx context.Context, req *Branch) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}

func RegisterRmServer(s *grpc.Server, srv RmServer) {
	s.RegisterService(&_Rm_serviceDesc, srv)
}

func _Rm_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RmServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Rm/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RmServer).Prepare(ctx, req.(*Xid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rm_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Branch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RmServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Rm/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RmServer).Commit(ctx, req.(*Branch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rm_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Branch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RmServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Rm/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RmServer).Cancel(ctx, req.(*Branch))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcc.Rm",
	HandlerType: (*RmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Rm_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Rm_Commit_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Rm_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rm.proto",
}
