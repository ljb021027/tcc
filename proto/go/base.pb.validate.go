// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: base.proto

package tcc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _base_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Branch with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Branch) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetXid()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BranchValidationError{
				field:  "Xid",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BranchId

	if v, ok := interface{}(m.GetRmResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BranchValidationError{
				field:  "RmResource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetParam()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BranchValidationError{
				field:  "Param",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BranchValidationError is the validation error returned by Branch.Validate if
// the designated constraints aren't met.
type BranchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BranchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BranchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BranchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BranchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BranchValidationError) ErrorName() string { return "BranchValidationError" }

// Error satisfies the builtin error interface
func (e BranchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBranch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BranchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BranchValidationError{}

// Validate checks the field values on RmResource with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RmResource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	return nil
}

// RmResourceValidationError is the validation error returned by
// RmResource.Validate if the designated constraints aren't met.
type RmResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RmResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RmResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RmResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RmResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RmResourceValidationError) ErrorName() string { return "RmResourceValidationError" }

// Error satisfies the builtin error interface
func (e RmResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRmResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RmResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RmResourceValidationError{}

// Validate checks the field values on Param with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Param) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// ParamValidationError is the validation error returned by Param.Validate if
// the designated constraints aren't met.
type ParamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParamValidationError) ErrorName() string { return "ParamValidationError" }

// Error satisfies the builtin error interface
func (e ParamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParamValidationError{}

// Validate checks the field values on Xid with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Xid) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sequences

	return nil
}

// XidValidationError is the validation error returned by Xid.Validate if the
// designated constraints aren't met.
type XidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e XidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e XidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e XidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e XidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e XidValidationError) ErrorName() string { return "XidValidationError" }

// Error satisfies the builtin error interface
func (e XidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sXid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = XidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = XidValidationError{}

// Validate checks the field values on Report with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Report) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReportStatus

	return nil
}

// ReportValidationError is the validation error returned by Report.Validate if
// the designated constraints aren't met.
type ReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportValidationError) ErrorName() string { return "ReportValidationError" }

// Error satisfies the builtin error interface
func (e ReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportValidationError{}
