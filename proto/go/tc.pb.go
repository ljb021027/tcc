// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tc.proto

package tcc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tc.proto", fileDescriptor_f607e08b02c5e445) }

var fileDescriptor_f607e08b02c5e445 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8e, 0x31, 0xcb, 0xc2, 0x30,
	0x10, 0x40, 0xfb, 0x7d, 0x42, 0x29, 0x11, 0x1c, 0x82, 0x38, 0xc4, 0xc9, 0xba, 0x4a, 0x0a, 0xba,
	0x39, 0x56, 0xc4, 0xcd, 0xa1, 0x74, 0x70, 0x4d, 0xce, 0x58, 0x83, 0x69, 0xaf, 0xa4, 0x27, 0xe2,
	0x1f, 0xf3, 0xf7, 0x89, 0x0d, 0x3a, 0x08, 0x6e, 0xf7, 0xee, 0x1e, 0x8f, 0x63, 0x09, 0x81, 0x6c,
	0x3d, 0x12, 0xf2, 0x01, 0x01, 0x88, 0x69, 0x85, 0x58, 0x39, 0x93, 0xf5, 0x2b, 0x7d, 0x3d, 0x65,
	0xa6, 0x6e, 0xe9, 0x1e, 0x0c, 0xc1, 0xb4, 0xea, 0x4c, 0x98, 0x97, 0x8f, 0x3f, 0xf6, 0x5f, 0x02,
	0x5f, 0xb3, 0xf1, 0xde, 0xdc, 0x76, 0x0e, 0xb5, 0x72, 0xa5, 0x57, 0x4d, 0xa7, 0x80, 0x2c, 0x36,
	0x7c, 0x22, 0x43, 0x48, 0xbe, 0x43, 0x72, 0xfb, 0x0a, 0x89, 0x44, 0x12, 0x80, 0x3c, 0xd8, 0x63,
	0x1a, 0xf1, 0x05, 0x1b, 0x15, 0xa6, 0xb2, 0x1d, 0x19, 0x9f, 0x7b, 0xd5, 0xc0, 0x99, 0x0f, 0xfb,
	0x6b, 0x00, 0x11, 0xa0, 0x30, 0x2d, 0x7a, 0x4a, 0x23, 0x3e, 0x63, 0xf1, 0x06, 0xeb, 0xda, 0x12,
	0xff, 0x34, 0xbe, 0x95, 0x39, 0x4b, 0x0a, 0x74, 0x2e, 0x57, 0x70, 0xf9, 0x29, 0xe9, 0xb8, 0xff,
	0x68, 0xf5, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xd4, 0x00, 0x65, 0xf9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TcClient is the client API for Tc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TcClient interface {
	NewGlobalTransaction(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Xid, error)
	RegisterBranch(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*Report, error)
	Commit(ctx context.Context, in *Xid, opts ...grpc.CallOption) (*Report, error)
	RollBack(ctx context.Context, in *Xid, opts ...grpc.CallOption) (*Report, error)
}

type tcClient struct {
	cc *grpc.ClientConn
}

func NewTcClient(cc *grpc.ClientConn) TcClient {
	return &tcClient{cc}
}

func (c *tcClient) NewGlobalTransaction(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Xid, error) {
	out := new(Xid)
	err := c.cc.Invoke(ctx, "/tcc.Tc/NewGlobalTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) RegisterBranch(ctx context.Context, in *Branch, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/tcc.Tc/RegisterBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) Commit(ctx context.Context, in *Xid, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/tcc.Tc/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) RollBack(ctx context.Context, in *Xid, opts ...grpc.CallOption) (*Report, error) {
	out := new(Report)
	err := c.cc.Invoke(ctx, "/tcc.Tc/RollBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcServer is the server API for Tc service.
type TcServer interface {
	NewGlobalTransaction(context.Context, *empty.Empty) (*Xid, error)
	RegisterBranch(context.Context, *Branch) (*Report, error)
	Commit(context.Context, *Xid) (*Report, error)
	RollBack(context.Context, *Xid) (*Report, error)
}

// UnimplementedTcServer can be embedded to have forward compatible implementations.
type UnimplementedTcServer struct {
}

func (*UnimplementedTcServer) NewGlobalTransaction(ctx context.Context, req *empty.Empty) (*Xid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGlobalTransaction not implemented")
}
func (*UnimplementedTcServer) RegisterBranch(ctx context.Context, req *Branch) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBranch not implemented")
}
func (*UnimplementedTcServer) Commit(ctx context.Context, req *Xid) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedTcServer) RollBack(ctx context.Context, req *Xid) (*Report, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBack not implemented")
}

func RegisterTcServer(s *grpc.Server, srv TcServer) {
	s.RegisterService(&_Tc_serviceDesc, srv)
}

func _Tc_NewGlobalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).NewGlobalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/NewGlobalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).NewGlobalTransaction(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_RegisterBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Branch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).RegisterBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/RegisterBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).RegisterBranch(ctx, req.(*Branch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).Commit(ctx, req.(*Xid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_RollBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).RollBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/RollBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).RollBack(ctx, req.(*Xid))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tcc.Tc",
	HandlerType: (*TcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGlobalTransaction",
			Handler:    _Tc_NewGlobalTransaction_Handler,
		},
		{
			MethodName: "RegisterBranch",
			Handler:    _Tc_RegisterBranch_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Tc_Commit_Handler,
		},
		{
			MethodName: "RollBack",
			Handler:    _Tc_RollBack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tc.proto",
}
